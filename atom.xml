<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NOTED DIM&#39;ENSIONS</title>
  
  <subtitle>钉子的笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://note.dim.moe/"/>
  <updated>2020-04-21T23:35:26.188Z</updated>
  <id>http://note.dim.moe/</id>
  
  <author>
    <name>Dimpurr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>部署 ROCm 和 tensorflow-rocm 到 Ubuntu 18.04 (Radeon VII)</title>
    <link href="http://note.dim.moe/rocm-ubuntu/"/>
    <id>http://note.dim.moe/rocm-ubuntu/</id>
    <published>2020-04-21T20:58:53.000Z</published>
    <updated>2020-04-21T23:35:26.188Z</updated>
    
    <content type="html"><![CDATA[<p>ROCm 实在是太多坑了 …… 用剩下的最后一口气吐槽+写文记录。晒一张最终跑分：</p><img src="/rocm-ubuntu/200422-gpu-benchmark.png" class="" title="200422-gpu-benchmark"><h3 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h3><p>（这些都是废话，技术目的阅读请直接跳过）</p><p>因为一开始就计划要 Hackintosh 然后给 itx (机器名 madoka) 选装了 Radeon VII 。 HIS 公版，方方铁盒子信仰小红灯外加三个风扇，看起来就很生猛。这个价位可以买到的性价比最高的算力。更重要的是 macOS 可以免驱直插。 Mac Pro 同款。 7nm 制程（并没有什么卵用）， 16GB 显存富得流油（相对真正的实力来说根本不算什么）。隔壁 NIVIDA ，就算是 MacBook 官方提供的型号，更新 Mojave 之后一样驱动凉凉， N 卡用户没人权。再说我也没什么游戏需求， 3DMark 跑分看起来也七七八八，除了不限制电压的话风扇火力全开 4k rpm 噪音直接航天飞机起飞，其他一切都看起来很完美。</p><p>……直到我想搞深度学习（暴露了这家伙以前都没好好跑过几个网络的事实）。</p><p>人类回想起了被老黄 CUDA 统治的恐惧和你 AI 届 A 卡用户没人权的事实。 AMD 一点也不 Yes 。 ROCm 支持框架屈指可数，支持的还有一半在 in development ，完全不支持 Windows ，嗯 …… （科研人员：我们都是工费拨款，买来一块 Titan XP 插上就好了！</p><p>我烦恼了很久很久因为我真的很想一边跑 Tensorflow 一边开着 DAW 或者非编软件尤其是可爱的 Touch Designer 折腾可视化啊！事实已经证明了我的灵魂是媒体工作者，虽然我想搞 Deep Learning 但我很确信我大部分时间会拿现成网络倒腾倒腾跑应用，并且输入输出大概率全是媒体文件。不知道，其实我是瞎说的。所以我非常希望能够在本地跑，第一时间预览加调试，外加也许会有大量尺寸不小的数据集（比如自己整的动画或者一时兴起爬了个 exhentai ），实在不想必须提交云算力、或者把调试网络的系统环境与其他工作完全分开，每次想跑 AI 就必须停下手头全部其他事情然后重启进系统专注调参一发入魂 ……</p><p>以上这些毫无根据的执著以及自己钱太多的幻觉（信用卡警告）以至于此人花费超过半天时间研究雷蛇和技嘉的显卡盒以及DIY显卡核的可操作性和性能影响、发现itx上双显卡主板是完全不存在的伪需求、发现SLI双卡交火完全没什么意义更不要说A/N双卡打架以及自己的 MacBook Pro mid 2014 是雷电2会让外接速率雪上加霜。甚至还考虑相信 12 核 24 线程的 3900x 并使用 CPU 跑了一下 tensorflow benchmark ，结果 …… 速度是 VII 参考性能的 1/40 （ <a href="http://ai-benchmark.com/ranking_deeplearning.html" target="_blank" rel="noopener">http://ai-benchmark.com/ranking_deeplearning.html</a> &gt; Desktop GPUs and CPUs）。最后认真考虑了乖乖接受 NAS + wireguard 虚拟 NAT 使用云算力的方案之后，打算随便本地再开个系统装个 ROCm 跑通跑个分备用了事了。</p><p>然后， Elementary OS 拯救了我。它太美了。</p><p>（以下正文）</p><h3 id="ROCm-安装"><a href="#ROCm-安装" class="headerlink" title="ROCm 安装"></a>ROCm 安装</h3><p>官方文档：<a href="https://rocm-documentation.readthedocs.io/en/latest/Installation_Guide/Installation-Guide.html" target="_blank" rel="noopener">https://rocm-documentation.readthedocs.io/en/latest/Installation_Guide/Installation-Guide.html</a></p><p>这里是本机直接安装， ROCm 驱动并不会影响正常显示使用，如果是 docker 安装则需要屏蔽原有驱动并导致分辨率降低，若需要 docker 教程请另行寻找。</p><p>首先更新系统然后安装基础依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">sudo apt install libnuma-dev</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>重启了吗？然后添加 ROCm 的 ppa repo ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main'</span> | sudo tee /etc/apt/sources.list.d/rocm.list</span><br></pre></td></tr></table></figure><p>这里有个很微妙的点，看到那里写的 <code>xenial</code> 了吗？千万不要像我一样自作聪明觉得可以改成 <code>bionic</code> 。这个 repo 里面根本没有 <code>bionic</code> 目录。至少现在还没有。</p><p>接下来更新源并安装：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yarn global add hexo <span class="comment"># npm install -g hexo-cli</span></span><br><span class="line"><span class="built_in">cd</span> dimpurr.github.io</span><br><span class="line">git checkout -b hexo</span><br><span class="line">hexo init tmp</span><br><span class="line">mv ./tmp/* .</span><br><span class="line">rm -rf tmp <span class="comment"># rmdir tmp on windows</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install rocm-dkms</span><br></pre></td></tr></table></figure><p>由于 Radeon 自己的源不能被 USTC / TUNA 等 Ubuntu deb 源加速，所以国内速度往往很慢（ 40MB 40kb/s ~1h），建议临时给 apt 增加全局代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/apt.conf.d/proxy.conf</span><br><span class="line">Acquire &#123;</span><br><span class="line">  HTTP::proxy <span class="string">"http://127.0.0.1:1080"</span>;</span><br><span class="line">  HTTPS::proxy <span class="string">"http://127.0.0.1:1080"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用完记得删掉。</p><p>安装完了吗？给你的用户改一下用户组，只有 video 组才可以访问 ROCm 资源。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">groups <span class="comment"># 查看当前用户组</span></span><br><span class="line">sudo usermod -a -G video <span class="variable">$LOGNAME</span> <span class="comment"># 给当前用户添加用户组</span></span><br><span class="line"><span class="comment"># 以后新增用户自动进入 video 用户组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'ADD_EXTRA_GROUPS=1'</span> | sudo tee -a /etc/adduser.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'EXTRA_GROUPS=video'</span> | sudo tee -a /etc/adduser.conf</span><br><span class="line"><span class="comment"># 将 ROCm 环境变量添加到用户</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64'</span> |</span><br><span class="line">sudo tee -a /etc/profile.d/rocm.sh</span><br></pre></td></tr></table></figure><p>重启（甚至其实根本不用重启），接下来执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;opt&#x2F;rocm&#x2F;bin&#x2F;rocminfo</span><br><span class="line">&#x2F;opt&#x2F;rocm&#x2F;opencl&#x2F;bin&#x2F;x86_64&#x2F;clinfo</span><br></pre></td></tr></table></figure><p>正确输出了吗？恭喜你，成功啦！到此结束。</p><p>个P。如果你到这里还没踩到坑，那你重启两遍。如果还没有坑，那么你用的不是 Ubuntu / Debian ，而且还拥有一个完美的内核版本，当我什么都没说。请直接跳到 <code>tensorflow-rocm</code> 部分继续阅读。</p><h4 id="重启出现-HSA-STATUS-ERROR-OUT-OF-RESOURCES"><a href="#重启出现-HSA-STATUS-ERROR-OUT-OF-RESOURCES" class="headerlink" title="重启出现 HSA_STATUS_ERROR_OUT_OF_RESOURCES"></a>重启出现 HSA_STATUS_ERROR_OUT_OF_RESOURCES</h4><p>基本上如果是比较干净的系统的话，基本都能一口气跑到尾，甚至可以正常输出 <code>rocminfo</code> 等信息。然后重启一次，一切就都……变化了模样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Failed to get user name to check <span class="keyword">for</span> video group membership</span><br><span class="line">hsa api call failure at: /data/jenkins_workspace/compute-rocm-rel-2.9/rocminfo/rocminfo.cc:1102</span><br><span class="line">Call returned HSA_STATUS_ERROR_OUT_OF_RESOURCES: The runtime failed to allocate the necessary resources. This error may also occur when the core runtime library needs to spawn threads or create internal OS-specific events.</span><br></pre></td></tr></table></figure><p>相关 ISSUE ： <a href="https://github.com/RadeonOpenCompute/ROCm/pull/1005" target="_blank" rel="noopener">https://github.com/RadeonOpenCompute/ROCm/pull/1005</a></p><p>血红血红的。而且第一句特别蠢，怎么连用户名也没拿到啊（实际上这句话没什么影响）？这种情况下 <code>clinfo</code> 也无法执行，但是 <code>rocm-smi</code> 仍旧完全正常。根据上面那个 ISSUE 的说法，是用户组问题。我看也是。这个 ISSUE 关联的 Pull Request 中修改了 README.md ，提供了一套解决方法： <a href="https://github.com/RadeonOpenCompute/ROCm/pull/1005/files" target="_blank" rel="noopener">https://github.com/RadeonOpenCompute/ROCm/pull/1005/files</a> 但我测试并没有效果。</p><p>我是怎么解决的呢？我翻遍了 Google 前三页都没解决，然后在 <a href="https://blog.csdn.net/zaq15csdn/article/details/104743655" target="_blank" rel="noopener">CSDN</a> 上看到了一句话： sudo 一下试试。</p><p><code>sudo rocminfo</code> （其实这样是没有环境变量的，所以一开始应该是 <code>sudo /opt/rocm/bin/rocminfo</code>）</p><p>……成了。</p><p>天知道为什么可以，我的 root 肯定不在 video 组，更不要说上面 ISSUE 认为需要的 render 组了。反正今后 <code>sudo su</code> 就能用。何乐而不为啊！</p><h4 id="在-apt-install-rocm-dkms-过程中出现-Error-Bad-return-status-for-module-build-on-kernel"><a href="#在-apt-install-rocm-dkms-过程中出现-Error-Bad-return-status-for-module-build-on-kernel" class="headerlink" title="在 apt install rocm-dkms 过程中出现 Error! Bad return status for module build on kernel"></a>在 <code>apt install rocm-dkms</code> 过程中出现 <code>Error! Bad return status for module build on kernel</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Building initial module <span class="keyword">for</span> 5.3.0-46-generic</span><br><span class="line">Error! Bad <span class="built_in">return</span> status <span class="keyword">for</span> module build on kernel: 5.3.0-46-generic (x86_64)</span><br><span class="line">Consult /var/lib/dkms/amdgpu/3.3-19/build/make.log <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>啥事都没有，放心好了。这个 log 又长又什么都看不出来。 ROCm 也安装好了也能用。忽略就行。至少我这行。</p><h3 id="官方-amdgpu-amdgpu-pro-驱动安装卸载相关问题"><a href="#官方-amdgpu-amdgpu-pro-驱动安装卸载相关问题" class="headerlink" title="官方 amdgpu / amdgpu-pro 驱动安装卸载相关问题"></a>官方 <code>amdgpu</code> / <code>amdgpu-pro</code> 驱动安装卸载相关问题</h3><p>这其实是一个根本不存在的问题，尤其是如果你从全新系统开始。 ROCm 是不需要提前手动装其他驱动的。</p><h4 id="不必要提前安装驱动。不是-docker-版本不需要提前屏蔽驱动。"><a href="#不必要提前安装驱动。不是-docker-版本不需要提前屏蔽驱动。" class="headerlink" title="不必要提前安装驱动。不是 docker 版本不需要提前屏蔽驱动。"></a>不必要提前安装驱动。不是 docker 版本不需要提前屏蔽驱动。</h4><p>但是！也不能没有驱动。 ROCm 需要有一个 amdgpu 驱动在运行。屏蔽驱动的方法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/modprobe.d/blacklist.conf</span><br><span class="line"><span class="comment">#: blacklist amdgpu</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-radeon.conf</span><br><span class="line"><span class="comment">#: blacklist radeon</span></span><br><span class="line"><span class="comment"># 这一行也可以手动直接写在上面的文件，但是如果安装过官方驱动，就会自动创建这个文件</span></span><br></pre></td></tr></table></figure><p>告诉你这个是为了让你明白……不要屏蔽驱动。如果不知道什么情况下屏蔽了就去注释掉。</p><p>不过如果你不知道为什么装过其中一个驱动，你就会在后面 <code>sudo apt install rocm-dkms</code> 的时候碰到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg: error processing archive /var/cache/apt/archives/rock-dkms_1.8-151_all.deb (--unpack):</span><br><span class="line">trying to overwrite <span class="string">'/usr/share/dkms/modules_to_force_install/amdgpu'</span>, <span class="built_in">which</span> is also <span class="keyword">in</span> package amdgpu-dkms 18.10-572953</span><br><span class="line">dpkg-deb: error: subprocess paste was killed by signal (Broken pipe)</span><br></pre></td></tr></table></figure><p>去网上搜一圈这里会有教你强制 overwrite 的。但恕我对 dpkg 一窍不通，我觉得并没有什么用。还是建议直接把驱动卸载掉。</p><h3 id="官方驱动安装方法"><a href="#官方驱动安装方法" class="headerlink" title="官方驱动安装方法"></a>官方驱动安装方法</h3><p>以 Radeon VII 为例（应该都大同小异），<a href="https://www.amd.com/en/support/graphics/amd-radeon-2nd-generation-vega/amd-radeon-2nd-generation-vega/amd-radeon-vii" target="_blank" rel="noopener">VII 驱动下载地址</a> ，下载后 <code>tar xf amdgpu-*-ubuntu-18.04.tar.xz</code> 解压然后 <code>cd amdgpu*</code> 进入文件夹。</p><p>如果你要安装普通版驱动，那么 <code>./amdgpu-install</code> 。不需要提前 sudo ，后面会叫你输入密码的。如果是 Pro 驱动，那么 <code>./amdgpu-pro-install</code> 就好了。就是这么简单，快捷，以及人性化。 AMD 万岁。</p><p>……要是真的话就好了。</p><h4 id="官方驱动强制卸载方法"><a href="#官方驱动强制卸载方法" class="headerlink" title="官方驱动强制卸载方法"></a>官方驱动强制卸载方法</h4><p>这个脚本有一万种情况可以出错然后喊你用 <code>amdgpu-uninstall</code> / <code>amdgpu-pro-uninstall</code> 命令或者直接在安装脚本后面加 <code>--uninstall</code> 命令来清理不正确的安装否则就完全不能继续，包括但不限于你挂了代理（是的，以我个人经验，建议请务必在下载 rocm 的时候打开 apt 代理，而同时务必在安装驱动（不，你根本就不应该装，除非……你是为了完整的安装以便卸载干净它……）的时候关掉代理）， apt 缓存的包有问题，编译哪里掉了链子以及其他一切。虽然几率其实不高，但是一旦发生了 ……</p><p>你会遇到这种错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">You might want to run <span class="string">'apt --fix-broken install'</span> to correct these.</span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line">amdgpu-dkms : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">amdgpu-lib-hwe : Depends: amdgpu-core (= 19.30-934563) but it is not going to be installed</span><br><span class="line">amdgpu-pro-core : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">gst-omx-amdgpu : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">libdrm-amdgpu-common : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">libdrm2-amdgpu:i386 : Depends: amdgpu-core:i386</span><br><span class="line">libdrm2-amdgpu : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">libegl1-amdgpu-mesa:i386 : Depends: amdgpu-core:i386</span><br><span class="line">libegl1-amdgpu-mesa : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">libgbm1-amdgpu:i386 : Depends: amdgpu-core:i386</span><br><span class="line">libgbm1-amdgpu : Depends: amdgpu-core but it is not going to be installed</span><br><span class="line">...</span><br><span class="line">E: Unmet dependencies. Try <span class="string">'apt --fix-broken install'</span> with no packages (or specify a solution).</span><br></pre></td></tr></table></figure><p>（有人会叫你 <code>sudo dpkg -i --force-overwrite /var/cache/apt/archives/rock-dkms_2.10-14_all.deb</code> ）</p><p>还有这种错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg: error processing package amdgpu (--remove):</span><br><span class="line"> dependency problems - not removing</span><br><span class="line">Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line"> amdgpu</span><br></pre></td></tr></table></figure><p>还有前面提过的 overwrite 错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Preparing to unpack .../libdrm-amdgpu-common_1.0.0-633530_all.deb ...</span><br><span class="line">Unpacking libdrm-amdgpu-common (1.0.0-633530) ...</span><br><span class="line">dpkg: error processing archive /var/opt/amdgpu-pro-local/./libdrm-amdgpu-common_1.0.0-633530_all.deb (--unpack):</span><br><span class="line"> trying to overwrite <span class="string">'/opt/amdgpu/share/libdrm/amdgpu.ids'</span>, <span class="built_in">which</span> is also <span class="keyword">in</span> package ids-amdgpu 1.0.0-606296</span><br><span class="line">Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line">/var/opt/amdgpu-pro-local/./libdrm-amdgpu-common_1.0.0-633530_all.deb</span><br></pre></td></tr></table></figure><p>（参考 <a href="https://askubuntu.com/questions/1068344/help-installing-amd-gpu-driver-in-ubuntu-18-04#comment1751443_1068344" target="_blank" rel="noopener">askubuntu post</a> ）</p><p>…… 还有长成各种各样的。这不重要，总而言之，最为行之有效的解决方案是 StackExchange 的 <a href="https://askubuntu.com/questions/363200/e-unable-to-correct-problems-you-have-held-broken-packages" target="_blank" rel="noopener">某个帖子</a> 藏在评论区的某个角落里的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure><p>是的你没看错，就是传说中的 新 立 德 。GUI，打开！ Edit &gt; Fix Broken Packages ！然后在 Package 列表中用 Broken 过滤器，全部 Mark Completion Removal ！这还没完，去列表里定位 <code>amdgpu</code> 或者 <code>amdgpu-pro</code> ，刚才出错的是那个就右键 Mark for Installation 哪个，记得点顶上的 Apply ，安装！</p><p>这可比 amdgpu-install 那脚本好使多了。吭哧吭哧安装上了，很好。那么，可以愉快的 <code>amdgpu-install --uninstall</code> 了…… （是的，这个安装不会在命令行添加 <code>amdgpu-uninstall</code> 命令）</p><p>报 apt lock 冲突的话别忘记把 synaptic gui 关掉啊。</p><h4 id="elementrary-或者其他野鸡-OS-适配"><a href="#elementrary-或者其他野鸡-OS-适配" class="headerlink" title="elementrary 或者其他野鸡 OS 适配"></a>elementrary 或者其他野鸡 OS 适配</h4><p>一个无足轻重的小问题。稍有常识的人都能自己想到的凑字数段落。</p><p>如果安装脚本报告 <code>Unsupported DEB-based OS: elementary</code> ，那么用一个你趁手的编辑器打开脚本，搜索 <code>ubuntu|linuxmint|debian</code> 并改成 <code>ubuntu|linuxmint|debian|elementary</code> 。其他系统同理。</p><h3 id="tensorflow-rocm-安装"><a href="#tensorflow-rocm-安装" class="headerlink" title="tensorflow-rocm 安装"></a>tensorflow-rocm 安装</h3><p>如果你的 rocm 就位了，你可以正常输出 <code>rocminfo</code> ，就可以来安装 tensorflow-rocm 了（ <a href="https://rocm-documentation.readthedocs.io/en/latest/Deep_learning/Deep-learning.html#tensorflow-installation" target="_blank" rel="noopener">官方文档</a> ）。</p><p>首先去 Python 官网下载 Python 3.7 ，太高不行哦，注意目前 tensorflow 2.0.0 官方支持的版本是 3.5-3.7 。然后记得安装 pip 。事实上可以 <code>sudo apt install python3-pip</code> 这样搞定的。可以提前搞个国内源。</p><p>然后记得先把原版（CUDA 版本）的 tensorflow 卸载干净哦。 <code>pip list | grep tensorflow</code> 看一下，有残留的就 <code>pip uninstall</code> 掉。</p><p>然后按官方教程操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install rocm-libs miopen-hip cxlactivitylogger rccl</span><br><span class="line">pip3 install --user tensorflow-rocm</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">python3.7 -m pip install --user tensorflow-rocm --upgrade</span><br></pre></td></tr></table></figure><p>大功告成！虽然 <code>E: Unable to locate package cxlactivitylogger</code> 了，但是你打算假装没看到（而且确实没有什么后果）。你愉快的打开 Python 交互式命令行，并打算来一个伟大的 Hello World ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 等等，我还没来得及输入下一句 ……</span></span><br><span class="line">print(tf.reduce_sum(tf.random.normal([<span class="number">1000</span>, <span class="number">1000</span>])))</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImportError: librccl.so.1: cannot open shared object file: No such file or directory</span><br><span class="line">Failed to load the native TensorFlow runtime.</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">'apt_pkg'</span></span><br></pre></td></tr></table></figure><p>眼尖的你一样就看出了问题所在，手疾眼快的打出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rccl</span><br></pre></td></tr></table></figure><p>或者，沉稳而又喜欢保险的你，快速的 Ctrl + V 出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y --allow-unauthenticated rocm-dkms rocm-dev rocm-libs rccl rocm-device-libs hsa-ext-rocr-dev hsakmt-roct-dev hsa-rocr-dev rocm-opencl rocm-opencl-dev rocm-utils rocm-profiler cxlactivitylogger miopen-hip miopengemm</span><br></pre></td></tr></table></figure><p><code>rocm-profiler</code> 和 <code>cxlactivitylogger</code> 又找不到，这怎么能难住你，反正本来其他的包装了也不知道有什么用，那就去掉这俩呗：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y --allow-unauthenticated rocm-dkms rocm-dev rocm-libs rccl rocm-device-libs hsa-ext-rocr-dev hsakmt-roct-dev hsa-rocr-dev rocm-opencl rocm-opencl-dev rocm-utils miopen-hip miopengemm</span><br></pre></td></tr></table></figure><p>让我们再来一次 <code>import tensorflow as tf</code> ，大功告成，欢呼雀跃，四海奔腾，普天同庆！</p><h3 id="tensorflow-benchmarks-跑分"><a href="#tensorflow-benchmarks-跑分" class="headerlink" title="tensorflow/benchmarks 跑分"></a><a href="https://github.com/tensorflow/benchmarks/" target="_blank" rel="noopener">tensorflow/benchmarks</a> 跑分</h3><p>点进去 repo 然后拉下文件 （你竟然懒到点击一个链接，于是贴心的我给你准备好了： <code>git clone https://github.com/tensorflow/benchmarks.git</code> ），然后 <code>cd scripts/tf_cnn_benchmarks</code> ，有用户组问题的话记得 <code>sudo su</code> 一下，然后用以下命令（或者 everything you want）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.7 tf_cnn_benchmarks.py --num_gpus=1 --batch_size=64 --model=resnet50</span><br></pre></td></tr></table></figure><p>土豪请按需改 <code>num_gpus</code> 。如果想知道你买 GPU 有多值并想虐待你任劳任怨的 CPU 的话，请去掉这一项（不能填0！不要问我为什么知道）<a href="https://github.com/tensorflow/benchmarks/issues/82#issuecomment-342625947" target="_blank" rel="noopener">并加上必要的参数</a> <code>--data_format=NHWC --device=cpu</code> 。</p><p>运行会快速滚屏初始化，然后这里会忽然报错并卡住：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MIOpen(HIP): Warning [ForwardBackwardGetWorkSpaceSizeImplicitGemm] /root/driver/MLOpen/src/lock_file.cpp:75: Error creating file &lt;/root/.config/miopen//miopen.udb.lock&gt; <span class="keyword">for</span> locking.</span><br></pre></td></tr></table></figure><p>貌似这个报错并不重要，而且有时候不会出现。此后会一段时间没有显示，是在 <code>warm up</code> 和实时编译（ROCm 这里还要对 CUDA 做一次转换，所以速度会比 N 卡更慢一些，我这里花了足足 5 分钟），可以用 <code>htop</code> 监视 CPU 占用（基本只会跑满两三个单核），还可以看到不断刷新的 <code>clang</code> 进程。</p><p>也可以用 <code>watch -n 1 rocm-smi</code> 实时监控显卡资源情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ROCm System Management Interface&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">GPU  Temp   AvgPwr  SCLK     MCLK    Fan    Perf  PwrCap  VRAM%  GPU%  </span><br><span class="line">0    55.0c  25.0W   1546Mhz  800Mhz  54.9%  auto  250.0W   99%   0%    </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;End of ROCm SMI Log &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>会发现 VRAM 很快就满了。恩 …… 16G 看来也不怎么够啊（逃</p><h3 id="参考成绩"><a href="#参考成绩" class="headerlink" title="参考成绩"></a>参考成绩</h3><p>这个 ISSUE 里有大量相同参数的跑分可供对比： <a href="https://github.com/ROCmSoftwarePlatform/tensorflow-upstream/issues/173" target="_blank" rel="noopener">https://github.com/ROCmSoftwarePlatform/tensorflow-upstream/issues/173</a></p><p>以下是我个人的记录，跑的同时系统日常后台负载（浏览器，播放器，IM等），没有什么特别性能处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OS: elementary OS 5.1.3 Hera x86_64</span><br><span class="line">Kernel: 5.3.0-46-generic</span><br></pre></td></tr></table></figure><h5 id="GPU-AMD-Radeon-VII-16GB"><a href="#GPU-AMD-Radeon-VII-16GB" class="headerlink" title="GPU: AMD Radeon VII 16GB"></a>GPU: AMD Radeon VII 16GB</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Step  Img&#x2F;sec  total_loss</span><br><span class="line">1  images&#x2F;sec: 241.7 +&#x2F;- 0.0 (jitter &#x3D; 0.0)  8.220</span><br><span class="line">10  images&#x2F;sec: 241.6 +&#x2F;- 0.2 (jitter &#x3D; 0.5)  7.880</span><br><span class="line">20  images&#x2F;sec: 241.3 +&#x2F;- 0.2 (jitter &#x3D; 0.7)  7.910</span><br><span class="line">30  images&#x2F;sec: 241.3 +&#x2F;- 0.2 (jitter &#x3D; 0.9)  7.820</span><br><span class="line">40  images&#x2F;sec: 236.9 +&#x2F;- 2.0 (jitter &#x3D; 1.1)  8.004</span><br><span class="line">50  images&#x2F;sec: 237.3 +&#x2F;- 1.6 (jitter &#x3D; 1.3)  7.768</span><br><span class="line">60  images&#x2F;sec: 237.8 +&#x2F;- 1.3 (jitter &#x3D; 1.2)  8.115</span><br><span class="line">70  images&#x2F;sec: 237.7 +&#x2F;- 1.2 (jitter &#x3D; 1.5)  7.815</span><br><span class="line">80  images&#x2F;sec: 238.0 +&#x2F;- 1.0 (jitter &#x3D; 1.4)  7.975</span><br><span class="line">90  images&#x2F;sec: 238.4 +&#x2F;- 0.9 (jitter &#x3D; 1.3)  8.101</span><br><span class="line">100  images&#x2F;sec: 238.7 +&#x2F;- 0.8 (jitter &#x3D; 1.2)  8.042</span><br><span class="line">-</span><br><span class="line">total images&#x2F;sec: 238.68</span><br></pre></td></tr></table></figure><h5 id="CPU-AMD-Ryzen-9-3900X-12-24-3-800GHz"><a href="#CPU-AMD-Ryzen-9-3900X-12-24-3-800GHz" class="headerlink" title="CPU: AMD Ryzen 9 3900X 12- (24) @ 3.800GHz"></a>CPU: AMD Ryzen 9 3900X 12- (24) @ 3.800GHz</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Step    Img&#x2F;sec total_loss</span><br><span class="line">1       images&#x2F;sec: 5.7 +&#x2F;- 0.0 (jitter &#x3D; 0.0)  8.108</span><br><span class="line">10      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  8.122</span><br><span class="line">20      images&#x2F;sec: 5.7 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.983</span><br><span class="line">30      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.780</span><br><span class="line">40      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.849</span><br><span class="line">50      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.779</span><br><span class="line">60      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.825</span><br><span class="line">70      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.840</span><br><span class="line">80      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.818</span><br><span class="line">90      images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.646</span><br><span class="line">100     images&#x2F;sec: 5.8 +&#x2F;- 0.0 (jitter &#x3D; 0.1)  7.913</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">total images&#x2F;sec: 5.26</span><br><span class="line">----------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>这个是来搞笑的。不得不承认人类文明一直在进步。</p><img src="/rocm-ubuntu/200422-3900x-benchmark.jpg" class="" title="200422-3900x-benchmark"><img src="/rocm-ubuntu/200422-3900x-monitor.jpg" class="" title="200422-3900x-monitor"><img src="/rocm-ubuntu/200422-gpu-drinking-tea.jpg" class="" title="200422-gpu-drinking-tea"><p>真·12核有难GPU围观。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>有一个槽一直忘记吐：</p><img src="/rocm-ubuntu/200422-elementary.png" class="" title="200422-elementary"><p>在 Linux 下 Radeon VII 无论在 <strong>任何地方</strong> 都会被认做 Vega 20 。这两张卡到底有什么关系啊 ……</p><p>以及， Elementary 真是太美了。上一次用还是如此久远的 <a href="http://blog.dimpurr.com/elementary-first/" target="_blank" rel="noopener">Elementary OS Luna 第一天 | 钉子の次元</a> (2018-08-13) ，要不是 <a href="http://men.ci/" target="_blank" rel="noopener">Menci</a> 提到我都完全忘记了这个发行版的存在 …… 然而本来随便划分了 32G 打算献祭给 ROCm 的 eOS 就这样让我愉快的逃离了 Kubuntu 的魔爪，成为了一个我完全不会想要急着换回 Windows 或者 macOS 的主役日用 Linux 系统。请容我说， eOS 的开箱即用&amp;界面&amp;窗口管理&amp;日常体验实在是太优雅太舒服了！！</p><p>…… 唯一的缺点是基于 GTK 的 DE 在我 32‘ 2160p 的屏幕上没法 150% HiDPI 缩放，只能 2x 凑合用，好看但是牺牲了不少屏幕空间。而 KDE 虽然各种错乱，但也有一个聊胜于无的 1.5x ……</p><p>嘛总之，设计有 Figma ，画画有 Krita ， DAW 还有 BitWig 和 REAPER ，非编可以 DaVinci Resolve …… 这些都能解决，别的还叫事吗！ QQ WeChat 哪个不能 Wine ，日常笔记 SimpleNote Evernote 哪个不是全平台，更别说听歌 Apple Music Youtube Music 到哪都能 last.fm Scrobbler ，根本懒得重启的我直接安装 Android Studio 和 WPS 开始准备写学校实验报告了。操作系统，于我如浮云哉～</p><p>（这个人选择性忽视了还有 16 个小时就是移动开发课程作业 DDL 然而这个人还彻夜折腾 ROCm 至今项目一点没动的事实</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ROCm 实在是太多坑了 …… 用剩下的最后一口气吐槽+写文记录。晒一张最终跑分：&lt;/p&gt;
&lt;img src=&quot;/rocm-ubuntu/200422-gpu-benchmark.png&quot; class=&quot;&quot; title=&quot;200422-gpu-benchmark&quot;&gt;

&lt;h3 id=&quot;前因&quot;&gt;&lt;a href=&quot;#前因&quot; class=&quot;headerlink&quot; title=&quot;前因&quot;&gt;&lt;/a&gt;前因&lt;/h3&gt;&lt;p&gt;（这些都是废话，技术目的阅读请直接跳过）&lt;/p&gt;
&lt;p&gt;因为一开始就计划要 Hackintosh 然后给 itx (机器名 madoka) 选装了 Radeon VII 。 HIS 公版，方方铁盒子信仰小红灯外加三个风扇，看起来就很生猛。这个价位可以买到的性价比最高的算力。更重要的是 macOS 可以免驱直插。 Mac Pro 同款。 7nm 制程（并没有什么卵用）， 16GB 显存富得流油（相对真正的实力来说根本不算什么）。隔壁 NIVIDA ，就算是 MacBook 官方提供的型号，更新 Mojave 之后一样驱动凉凉， N 卡用户没人权。再说我也没什么游戏需求， 3DMark 跑分看起来也七七八八，除了不限制电压的话风扇火力全开 4k rpm 噪音直接航天飞机起飞，其他一切都看起来很完美。&lt;/p&gt;
&lt;p&gt;……直到我想搞深度学习（暴露了这家伙以前都没好好跑过几个网络的事实）。&lt;/p&gt;
&lt;p&gt;人类回想起了被老黄 CUDA 统治的恐惧和你 AI 届 A 卡用户没人权的事实。 AMD 一点也不 Yes 。 ROCm 支持框架屈指可数，支持的还有一半在 in development ，完全不支持 Windows ，嗯 …… （科研人员：我们都是工费拨款，买来一块 Titan XP 插上就好了！&lt;/p&gt;
&lt;p&gt;我烦恼了很久很久因为我真的很想一边跑 Tensorflow 一边开着 DAW 或者非编软件尤其是可爱的 Touch Designer 折腾可视化啊！事实已经证明了我的灵魂是媒体工作者，虽然我想搞 Deep Learning 但我很确信我大部分时间会拿现成网络倒腾倒腾跑应用，并且输入输出大概率全是媒体文件。不知道，其实我是瞎说的。所以我非常希望能够在本地跑，第一时间预览加调试，外加也许会有大量尺寸不小的数据集（比如自己整的动画或者一时兴起爬了个 exhentai ），实在不想必须提交云算力、或者把调试网络的系统环境与其他工作完全分开，每次想跑 AI 就必须停下手头全部其他事情然后重启进系统专注调参一发入魂 ……&lt;/p&gt;
&lt;p&gt;以上这些毫无根据的执著以及自己钱太多的幻觉（信用卡警告）以至于此人花费超过半天时间研究雷蛇和技嘉的显卡盒以及DIY显卡核的可操作性和性能影响、发现itx上双显卡主板是完全不存在的伪需求、发现SLI双卡交火完全没什么意义更不要说A/N双卡打架以及自己的 MacBook Pro mid 2014 是雷电2会让外接速率雪上加霜。甚至还考虑相信 12 核 24 线程的 3900x 并使用 CPU 跑了一下 tensorflow benchmark ，结果 …… 速度是 VII 参考性能的 1/40 （ &lt;a href=&quot;http://ai-benchmark.com/ranking_deeplearning.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ai-benchmark.com/ranking_deeplearning.html&lt;/a&gt; &amp;gt; Desktop GPUs and CPUs）。最后认真考虑了乖乖接受 NAS + wireguard 虚拟 NAT 使用云算力的方案之后，打算随便本地再开个系统装个 ROCm 跑通跑个分备用了事了。&lt;/p&gt;
&lt;p&gt;然后， Elementary OS 拯救了我。它太美了。&lt;/p&gt;
&lt;p&gt;（以下正文）&lt;/p&gt;
&lt;h3 id=&quot;ROCm-安装&quot;&gt;&lt;a href=&quot;#ROCm-安装&quot; class=&quot;headerlink&quot; title=&quot;ROCm 安装&quot;&gt;&lt;/a&gt;ROCm 安装&lt;/h3&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://rocm-documentation.readthedocs.io/en/latest/Installation_Guide/Installation-Guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://rocm-documentation.readthedocs.io/en/latest/Installation_Guide/Installation-Guide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里是本机直接安装， ROCm 驱动并不会影响正常显示使用，如果是 docker 安装则需要屏蔽原有驱动并导致分辨率降低，若需要 docker 教程请另行寻找。&lt;/p&gt;
&lt;p&gt;首先更新系统然后安装基础依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt dist-upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install libnuma-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo reboot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重启了吗？然后添加 ROCm 的 ppa repo ：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -q -O - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main&#39;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/rocm.list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里有个很微妙的点，看到那里写的 &lt;code&gt;xenial&lt;/code&gt; 了吗？千万不要像我一样自作聪明觉得可以改成 &lt;code&gt;bionic&lt;/code&gt; 。这个 repo 里面根本没有 &lt;code&gt;bionic&lt;/code&gt; 目录。至少现在还没有。&lt;/p&gt;
&lt;p&gt;接下来更新源并安装：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>部署 Hexo 博客到 Github Pages</title>
    <link href="http://note.dim.moe/hexo-pages/"/>
    <id>http://note.dim.moe/hexo-pages/</id>
    <published>2020-04-10T19:30:48.000Z</published>
    <updated>2020-04-21T23:35:26.188Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 官方的文档地址：<a href="https://hexo.io/docs/github-pages.html" target="_blank" rel="noopener">https://hexo.io/docs/github-pages.html</a> 这个文档有一堆问题，评论区有提到。</p><p>建议使用 Travis CI 来部署。</p><h3 id="创建-Repo-和安装-Hexo"><a href="#创建-Repo-和安装-Hexo" class="headerlink" title="创建 Repo 和安装 Hexo"></a>创建 Repo 和安装 Hexo</h3><p>首先创建一个自己用户名的 repo <code>dimpurr.github.io</code> 。</p><p>随意要不要 Initialize ，然后把 Hexo 的文件丢进去。 <del><code>.gitignore</code> 可以选 Node 的，记得从里面去掉 <code>public</code> 一行的注释。</del> Hexo 自带 <code>.gitignore</code> 所以不用选。</p><p>如果和我一样还没有安装 Hexo 的话， clone repo 然后去新建 hexo 分支：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yarn global add hexo <span class="comment"># npm install -g hexo-cli</span></span><br><span class="line"><span class="built_in">cd</span> dimpurr.github.io</span><br><span class="line">git checkout -b hexo</span><br><span class="line">hexo init tmp</span><br><span class="line">mv ./tmp/* .</span><br><span class="line">rm -rf tmp <span class="comment"># rmdir tmp on windows</span></span><br></pre></td></tr></table></figure><p>然后编辑 <code>_config.yml</code> 做一些基本设置。</p><p>我觉得有必要改的：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">'Shanghai'</span></span><br></pre></td></tr></table></figure><p>记得 push 。</p><h3 id="配置-Travis-Ci"><a href="#配置-Travis-Ci" class="headerlink" title="配置 Travis Ci"></a>配置 Travis Ci</h3><p>在 Github 账户上添加 Travis CI ： <a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noopener">https://github.com/marketplace/travis-ci</a></p><p>选开源 Free 就好。我选了 <code>Only select repositories</code> ，然后添加这个项目。</p><p>创建新的 Github Token ：<a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">https://github.com/settings/tokens/new</a></p><p>理论上只需要 <strong>repo</strong> 部分权限。存好这个 Token ，关掉网页就再也看不到了。</p><p>在 Travis CI 控制面板编辑对应 repo 的环境变量，例如 <a href="https://travis-ci.com/github/dimpurr/dimpurr.github.io/settings" target="_blank" rel="noopener">https://travis-ci.com/github/dimpurr/dimpurr.github.io/settings</a> ，把刚才的 Token 存进 <code>GH_TOKEN</code> 变量。</p><p>在 repo 里新建 <code>.travis.yml</code> 文件，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="comment"># store source code of hexo in hexo-source branch</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># added</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span> <span class="comment"># generate static files to master</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">hexo</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>此时就已经可以访问了。该换主题换主题，该加插件加插件，然后开始写文章吧！</p><p><del>吐槽一个，安装了主题之后 yarn fetch 慢死了， Travis CI 又要每次重新 fecth ，还不如手动 hexo generate 呢 ……</del></p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>在 Github 的 repo setting 里面设置自定义域名之后会在 master 生成一个 <code>CNAME</code> 文件，内容是你绑定的域名，显然这个是会被 Travis CI 覆盖掉的。</p><p>所以在 <code>hexo</code> 分支的 <code>source</code> 目录下手动创建这个文件，内容是一行你要绑定的域名。</p><p>然后到 DNS 配置中添加对应记录。如果是顶级域名的话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@          A             192.30.252.153</span><br><span class="line">@          A             192.30.252.154</span><br><span class="line">www      CNAME           username.github.io.</span><br></pre></td></tr></table></figure><p>如果是 HTTPS 的话， A 记录指向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>不是顶级域名不需要 A 记录。</p><h3 id="添加-RSS-插件"><a href="#添加-RSS-插件" class="headerlink" title="添加 RSS 插件"></a>添加 RSS 插件</h3><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-feed</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>可用的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><h3 id="本地测试和预览"><a href="#本地测试和预览" class="headerlink" title="本地测试和预览"></a>本地测试和预览</h3><p>因为 Travis CI 慢死了，以及编辑文章想要看主题效果的时候还是本地预览方便，可以在 <code>public</code> 目录下用 Python 跑一个迷你服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 -m SimpleHTTPServer</span><br><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>然后访问 <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 官方的文档地址：&lt;a href=&quot;https://hexo.io/docs/github-pages.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/docs/github-pages.html&lt;/a&gt; 这个文档有一堆问题，评论区有提到。&lt;/p&gt;
&lt;p&gt;建议使用 Travis CI 来部署。&lt;/p&gt;
&lt;h3 id=&quot;创建-Repo-和安装-Hexo&quot;&gt;&lt;a href=&quot;#创建-Repo-和安装-Hexo&quot; class=&quot;headerlink&quot; title=&quot;创建 Repo 和安装 Hexo&quot;&gt;&lt;/a&gt;创建 Repo 和安装 Hexo&lt;/h3&gt;&lt;p&gt;首先创建一个自己用户名的 repo &lt;code&gt;dimpurr.github.io&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;随意要不要 Initialize ，然后把 Hexo 的文件丢进去。 &lt;del&gt;&lt;code&gt;.gitignore&lt;/code&gt; 可以选 Node 的，记得从里面去掉 &lt;code&gt;public&lt;/code&gt; 一行的注释。&lt;/del&gt; Hexo 自带 &lt;code&gt;.gitignore&lt;/code&gt; 所以不用选。&lt;/p&gt;
&lt;p&gt;如果和我一样还没有安装 Hexo 的话， clone repo 然后去新建 hexo 分支：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
